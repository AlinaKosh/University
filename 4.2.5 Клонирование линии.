package ru.kosheleva.geometry;

import ru.kosheleva.geometry.Brokenable;
import ru.kosheleva.geometry.Point;
import ru.kosheleva.geometry.PoliLine;

import java.util.Objects;

public class Line implements Lengable, Brokenable, Cloneable {
    public Point start;
    public Point end;

    public Line(Point start, Point end) {
        this.start = start;
        this.end = end;
    }

    public double getLength() {
        return Math.sqrt((end.getX() - start.getX()) * (end.getX() - start.getX()) + (end.getY() - start.getY()) * (end.getY() - start.getY()));
    }

    public static double distance(Point point1, Point point2){
        return Math.sqrt(Math.pow(point2.getX() - point1.getX(), 2) + Math.pow(point2.getY() - point1.getY(), 2));
    }

    @Override
    public String toString() {
        return "Line{" +
                "start=" + start +
                ", end=" + end +
                '}';
    }

    @Override
    public PoliLine getBroken() {
        return new PoliLine(start,end);
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Line line = (Line) o;
        return Objects.equals(start, line.start) && Objects.equals(end, line.end);
    }

    @Override
    public int hashCode() {
        return Objects.hash(start, end);
    }

    @Override
    public Line clone() throws CloneNotSupportedException {
        return (Line) super.clone();
    }
}



public class Main {

    public static void main(String[] args) throws CloneNotSupportedException {
        
        Line line = new Line(new Point(1,2), new Point(5,6));
        Line lineCopy = line.clone();
        System.out.println(line);
        System.out.println(lineCopy);

    }

}
