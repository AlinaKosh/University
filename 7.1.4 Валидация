package test;

public class Human {
    public int age;

    public Human(int age) {
        this.age = age;
    }


    @Override
    public String toString() {
        return "Human{" +
                "age=" + age +
                '}';
    }
}


package test;

import java.lang.reflect.Field;

public class HumanTest {
    public static void check(Object obj) throws Exception {
        if (!(obj instanceof Human)) throw new Exception(); //если объект не является Human, то выкидывается ошибка и работа в методе заканчивается
        Human h = (Human)obj;
        if (h.age>200){
            throw new Exception("Возраст человека не больше 200 лет");
        }
    }
}


main(){
  Human human = new Human(250);
  validate(human, HumanTest.class);
}

//Метод в main
public static void validate(Object obj, Class<?> clTest) throws NoSuchMethodException, InvocationTargetException, IllegalAccessException, NoSuchFieldException, InstantiationException {
        Class<?> valClass = obj.getClass();
        for (Method method: clTest.getDeclaredMethods()){ //пробегаемся по методам, публичных и не публичных
            method.invoke(null, obj); //тут мы вызываем методы, которые есть в классе (invoke() - вызов методов)
        }

    }
