import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class PoliLine implements Lengable, Brokenable{
    public List<Point> points = new ArrayList<>();

    public PoliLine(Point... points) {
        this.points = Arrays.asList(points);
    }

    public PoliLine() {

    }

    public double getLength() {
        double length = 0.0;
        for (int i = 0; i < points.size() - 1; i++) {
            double sizeX = (points.get(i + 1).x - points.get(i).x) * (points.get(i + 1).x - points.get(i).x);
            double sizeY = (points.get(i + 1).y - points.get(i).y) * (points.get(i + 1).y - points.get(i).y);
            length += Math.sqrt(sizeX + sizeY);
        }
        return length;
    }

    @Override
    public String toString() {
        String res = "Line: ";
        for (Point point : points) {
            res += point + " ";
        }
        return res;
    }

    @Override
    public PoliLine getBroken() {
        return new PoliLine((Point) points);
    }
}



public class Square implements Figuresable, Brokenable{
    public int side;
    private Point point;

    public Square(int side, Point point) {
        if (side<=0) throw new IllegalArgumentException("Неправильно задана длина стороны");
        this.side = side;
        this.point = point;
    }

    public void setSide(int side) {
        if (side<=0) throw new IllegalArgumentException("Неправильно задана длина стороны");
        this.side = side;
    }

    public int getSide() {
        return side;
    }

    public PoliLine getBroken() {
        Point point11 = new Point(this.point.x, this.point.y);
        Point point2 = new Point(this.point.x + side, this.point.y);
        Point point3 = new Point(this.point.x + side, side + this.point.y);
        Point point4 = new Point(this.point.x, side + this.point.y);
        return new PoliLine(this.point, point2, point3, point4, point11);
    }

    @Override
    public double square() {
        return Math.pow(side,2);
    }
}
