public class Fractions extends Number {
    private final int numerator;
    private final int denominator;

    public Fractions(int numerator, int denominator) {
        if (denominator <= 0) throw new IllegalArgumentException("Знаменатель не может быть отрицательным");
        this.numerator = numerator;
        this.denominator = denominator;
    }

    public Fractions multiplication(Fractions fractions2) {
        int numer = this.numerator * fractions2.numerator;
        int denumir = this.denominator * fractions2.denominator;
        System.out.println(this.numerator + "/" + this.denominator + " * " + fractions2.numerator + "/" + fractions2.denominator + " = " + numer + "/" + denumir);
        return new Fractions(numer, denumir);
    }

    public Fractions division(Fractions fractions2) {
        int numer = this.numerator * fractions2.denominator;
        int denumir = this.denominator * fractions2.numerator;
        System.out.println(this.numerator + "/" + this.denominator + " / " + fractions2.numerator + "/" + fractions2.denominator + " = " + numer + "/" + denumir);
        return new Fractions(numer, denumir);
    }

    public Fractions sum(Fractions fractions2) {
        int numer = (this.numerator * fractions2.denominator) + (fractions2.numerator * this.denominator);
        int denumir = this.denominator * fractions2.denominator;
        System.out.println(this.numerator + "/" + this.denominator + " + " + fractions2.numerator + "/" + fractions2.denominator + " = " + numer + "/" + denumir);
        return new Fractions(numer, denumir);
    }

    public Fractions subtracting(Fractions fractions2) {
        int numer = (this.numerator * fractions2.denominator) - (fractions2.numerator * this.denominator);
        int denumir = this.denominator * fractions2.denominator;
        System.out.println(this.numerator + "/" + this.denominator + " - " + fractions2.numerator + "/" + fractions2.denominator + " = " + numer + "/" + denumir);
        return new Fractions(numer, denumir);
    }

    @Override
    public String toString() {
        return numerator + "/" + denominator;
    }

    @Override
    public int intValue() {
        return numerator/denominator;
    }

    @Override
    public long longValue() {
        return (long) numerator/denominator;
    }

    @Override
    public float floatValue() {
        return ((float) numerator)/((float) denominator);
    }

    @Override
    public double doubleValue() {
        return ((double) numerator)/((double) denominator);
    }
}
