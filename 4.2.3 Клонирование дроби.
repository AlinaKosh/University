package ru.kosheleva.calculating;

import java.util.Objects;

public final class Fractions extends Number implements Cloneable {
    private int numerator;
    private int denominator;

    public Fractions() {

    }

    public Fractions(int numerator, int denominator) {
        if (denominator <= 0) throw new IllegalArgumentException("Знаменатель не может быть отрицательным");
        this.numerator = numerator;
        this.denominator = denominator;
    }

    public Fractions multiplication(Fractions fractions2) {
        int numer = this.numerator * fractions2.numerator;
        int denumir = this.denominator * fractions2.denominator;
        System.out.println(this.numerator + "/" + this.denominator + " * " + fractions2.numerator + "/" + fractions2.denominator + " = " + numer + "/" + denumir);
        return new Fractions(numer, denumir);
    }

    public Fractions division(Fractions fractions2) {
        int numer = this.numerator * fractions2.denominator;
        int denumir = this.denominator * fractions2.numerator;
        System.out.println(this.numerator + "/" + this.denominator + " / " + fractions2.numerator + "/" + fractions2.denominator + " = " + numer + "/" + denumir);
        return new Fractions(numer, denumir);
    }

    public Fractions sum(Fractions fractions2) {
        int numer = (this.numerator * fractions2.denominator) + (fractions2.numerator * this.denominator);
        int denumir = this.denominator * fractions2.denominator;
        System.out.println(this.numerator + "/" + this.denominator + " + " + fractions2.numerator + "/" + fractions2.denominator + " = " + numer + "/" + denumir);
        return new Fractions(numer, denumir);
    }

    public Fractions subtracting(Fractions fractions2) {
        int numer = (this.numerator * fractions2.denominator) - (fractions2.numerator * this.denominator);
        int denumir = this.denominator * fractions2.denominator;
        System.out.println(this.numerator + "/" + this.denominator + " - " + fractions2.numerator + "/" + fractions2.denominator + " = " + numer + "/" + denumir);
        return new Fractions(numer, denumir);
    }

    @Override
    public int intValue() {
        return numerator / denominator;
    }

    @Override
    public long longValue() {
        return (long) numerator / denominator;
    }

    @Override
    public float floatValue() {
        return ((float) numerator) / ((float) denominator);
    }

    @Override
    public double doubleValue() {
        return ((double) numerator) / ((double) denominator);
    }

    public int getNumerator() {
        return numerator;
    }

    public int getDenominator() {
        return denominator;
    }

    public void setNumerator(int numerator) {
        this.numerator = numerator;
    }

    public void setDenominator(int denominator) {
        this.denominator = denominator;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Fractions fractions = (Fractions) o;
        return numerator == fractions.numerator && denominator == fractions.denominator;
    }

    @Override
    public int hashCode() {
        return Objects.hash(numerator, denominator);
    }

    @Override
    public Object clone() throws CloneNotSupportedException {
        return super.clone();
    }

    @Override
    public String toString() {
        return "Fractions{" +
                "numerator=" + numerator +
                ", denominator=" + denominator +
                '}';
    }
}



public class Main {

    public static void main(String[] args) throws CloneNotSupportedException {
        
        Fractions fractions = new Fractions(1,3);
        Fractions fractionsClone = (Fractions) fractions.clone();
        System.out.println(fractions);
        System.out.println(fractionsClone);
        fractionsClone.setNumerator(5);
        System.out.println(fractions);
        System.out.println(fractionsClone);

    }

}
