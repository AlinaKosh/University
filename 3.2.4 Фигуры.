public interface FiguresAble {
    double square();
}


public class Circle implements FiguresAble{
    private int r;
    private Point point;

    public Circle(Point point, int r) {
        this.point = point;
        this.r = r;
    }

    @Override
    public double square() {
        return Math.PI*Math.pow(r,2);
    }
}


public class Triangle implements FiguresAble{

    private final Point point1;
    private Point point2;
    private Point point3;

    public Triangle(Point point1, Point point2, Point point3) {
        this.point1 = point1;
        this.point2 = point2;
        this.point3 = point3;
    }

    @Override
    public double square() {

        double side1 = Line.distance(point2, point1);
        double side2 = Line.distance(point3, point2);
        double side3 = Line.distance(point3, point1);

        double polPerimetr = (side1 + side2 + side3) / 2;

        return Math.sqrt(polPerimetr * (polPerimetr - side1) * (polPerimetr - side2) * (polPerimetr - side3));
    }
}




public class Rectangle implements FiguresAble{

    private int side1;
    private int side2;

    public Rectangle(int side1, int side2) {
        this.side1 = side1;
        this.side2 = side2;
    }

    public int getSide2() {
        return side2;
    }

    @Override
    public double square() {
        return side1 * side2;
    }

}



public class Square implements FiguresAble{
    public int side;
    private Point point;

    public Square(int side, Point point) {
        if (side<=0) throw new IllegalArgumentException("Неправильно задана длина стороны");
        this.side = side;
        this.point = point;
    }

    public void setSide(int side) {
        if (side<=0) throw new IllegalArgumentException("Неправильно задана длина стороны");
        this.side = side;
    }

    public int getSide() {
        return side;
    }

    public final NewLine getBroken() {
        Point point11 = new Point(this.point.x, this.point.y);
        Point point2 = new Point(this.point.x + side, this.point.y);
        Point point3 = new Point(this.point.x + side, side + this.point.y);
        Point point4 = new Point(this.point.x, side + this.point.y);
        return new NewLine(this.point, point2, point3, point4, point11);
    }

    @Override
    public double square() {
        return Math.pow(side,2);
    }
}
